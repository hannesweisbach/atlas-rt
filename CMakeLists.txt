project(ATLAS-rt)
cmake_minimum_required(VERSION 2.8)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Weverything")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Weverything")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-c++98-compat")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-c++98-compat-pedantic")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-padded")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=memory")
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address")

set(THREADS_PREFER_PTHREAD_FLAG TRUE)
find_package(Threads REQUIRED)
find_library(BLOCKSRUNTIME_FOUND BlocksRuntime)

if(${BLOCKSRUNTIME_FOUND} MATCHES "-NOTFOUND")
  message(STATUS "BlocksRuntime not found.")
  set(FOUND_BLOCKSRUNTIME false)
else()
  message(STATUS "BlocksRuntime found")
  set(FOUND_BLOCKSRUNTIME true)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fblocks")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fblocks")
  set(BLOCKSRUNTIME_LIB "${BLOCKSRUNTIME_FOUND}")
endif()

include_directories(.)

add_subdirectory(common)
add_subdirectory(predictor)
add_subdirectory(dispatch)

add_executable(testcase test.c++)
set_target_properties(testcase PROPERTIES CXX_STANDARD 14 CXX_STANDARD_REQUIRED ON)
target_link_libraries(testcase dispatch)

if(FOUND_BLOCKSRUNTIME)
add_executable(blockstest atlas_blocks.c++)
set_target_properties(blockstest PROPERTIES CXX_STANDARD 14 CXX_STANDARD_REQUIRED ON)
target_link_libraries(blockstest dispatch)

add_executable(ctestcase test.c)
set_target_properties(ctestcase PROPERTIES C_STANDARD 11 C_STANDARD_REQUIRED ON)
target_link_libraries(ctestcase dispatch)
endif()
