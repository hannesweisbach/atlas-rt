project(ATLAS-rt)
cmake_minimum_required(VERSION 2.8)

list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)

if(${CMAKE_C_COMPILER_ID} MATCHES "Clang")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Weverything")
else()
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra")
endif()

if(${CMAKE_CXX_COMPILER_ID} MATCHES "Clang")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Weverything")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-c++98-compat")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-c++98-compat-pedantic")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-padded")
else()
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")
endif()

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=memory")
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address")

set(THREADS_PREFER_PTHREAD_FLAG TRUE)
find_package(Threads REQUIRED)
find_library(BLOCKSRUNTIME_FOUND BlocksRuntime)
find_package(GMP REQUIRED)

set(Boost_USE_STATIC_LIBS ON)
set(Boost_USE_MULTITHREADED ON)
set(Boost_USE_STATIC_RUNTIME ON)
find_package(Boost 1.54.0 COMPONENTS program_options math_tr1 REQUIRED)

if(${BLOCKSRUNTIME_FOUND} MATCHES "-NOTFOUND" OR NOT ${CMAKE_CXX_COMPILER_ID} MATCHES "Clang")
  message(STATUS "BlocksRuntime not found.")
  set(FOUND_BLOCKSRUNTIME false)
else()
  message(STATUS "BlocksRuntime found")
  set(FOUND_BLOCKSRUNTIME true)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fblocks")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fblocks")
  set(BLOCKSRUNTIME_LIB "${BLOCKSRUNTIME_FOUND}")
endif()

include_directories(.)
include_directories(${Boost_INCLUDE_DIR})

add_subdirectory(common)
add_subdirectory(atlas)
add_subdirectory(predictor)
add_subdirectory(dispatch)

add_executable(testcase test.c++)
set_target_properties(testcase PROPERTIES CXX_STANDARD 14 CXX_STANDARD_REQUIRED ON)
target_link_libraries(testcase dispatch)

if(FOUND_BLOCKSRUNTIME)
add_executable(blockstest atlas_blocks.c++)
set_target_properties(blockstest PROPERTIES CXX_STANDARD 14 CXX_STANDARD_REQUIRED ON)
target_link_libraries(blockstest dispatch)

add_executable(ctestcase test.c)
set_target_properties(ctestcase PROPERTIES C_STANDARD 11 C_STANDARD_REQUIRED ON)
target_link_libraries(ctestcase dispatch)
endif()
